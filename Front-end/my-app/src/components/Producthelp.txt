import { ProductType } from "../Types/ProductType.types";
import { IconContext } from "react-icons";
import { AiFillHeart, AiOutlineCloseCircle, AiOutlineDelete, AiOutlineHeart, AiOutlineShoppingCart } from "react-icons/ai";
import useAuth from "../hooks/useAuth";
import { useEffect, useState } from "react";
import { useNavigate } from "react-router";
import { Button, Card } from "react-bootstrap";
import { MdAddShoppingCart } from "react-icons/md";
import { deleteProduct } from "../api/api";
import "../Styles/Product.css";

interface Props {
    product: ProductType
    isFavorite: boolean
}
const Product =({product, isFavorite}:Props)=>{
    const [favorited,setFavorited] = useState(isFavorite);
   const navigate = useNavigate();
    const {auth} = useAuth();
    const [isAdmin,setIsAdmin] = useState(false);


    //convert image data 
    const base64String = product.image;
    const byteCharacters = atob(base64String);
    const byteNumbers = new Array(byteCharacters.length);
    for(let i=0; i< byteCharacters.length; i++){
        byteNumbers[i]=byteCharacters.charCodeAt(i);
    }
    const byteArray =new Uint8Array(byteNumbers);
    const image= new Blob([byteArray], {type:'image/jpeg'});
    const imageUrl = URL.createObjectURL(image);

    useEffect(()=>{
        setIsAdmin(auth.roles.includes('ROLE_ADMIN'))
    },[]);

const toggleFavorite =()=>{
   //verify if authenticated
   if(auth.accessToken){
    const token = window.localStorage.getItem('accessToken')
    if(!favorited){
        //send server request
            fetch(`http://localhost:8080/favorites/add/${product.id}`,{
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            })
            .then(response => response.json())
            .then(data =>{setFavorited(true);
            })
    }else{
                    //send server request
                    fetch(`http://localhost:8080/favorites/delete/${product.id}`,{
                        method: 'DELETE',
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    })
                    .then(response => response.json())
                    .then(data =>{
                                    setFavorited(false);
                    })
    }
   }else{
    alert("You must log in first!")
   }
}
    const goToProductDetails =()=>{
        navigate(`/ProductPage/${product.id}`)
        window.localStorage.setItem("imageUrl",base64String)
    }
   
    

    const handleProductDelete =()=>{
        const token = window.localStorage.getItem('accessToken')
        fetch(`http://localhost:8080/products/admin/${product.id}`,{
            method: 'DELETE',
            headers: {
                'Authorization' : `Bearer ${token}`
            }
        })
        .then(response => response.json())
        window.location.reload();
 
    }

    return(

    <Card>
           <div className="hoverable">
    {/* <Card.Img variant="top" src={"/snwb1.jpg"} */}
    <Card.Img variant="top" src={imageUrl}
                 onClick={goToProductDetails}
                 style={{ height: "40vh" }}
                />
 </div>
    <Card.Body className="card-details">
      <Card.Text>
        <label className={product.name.length > 20 ? `product-name-small` : `product-name-normal`}>{product.name} </label><br/>
        <label className="product-price">{product.price} RON </label>
      </Card.Text>
      <div className="product-buttons">
      <IconContext.Provider value={(isAdmin) ? {size: '60%'} : {size: '20%'}}>
                 <div className={isAdmin  ?  "admin-product-delete" : (`${favorited ? 'favorited' : 'not-favorited'}`)}
                              onClick={isAdmin ? handleProductDelete :  toggleFavorite}>
                                 {isAdmin ? <AiOutlineDelete/> : ( favorited ? <AiFillHeart />  : <AiOutlineHeart />  )}
                                 </div> 
                                 </IconContext.Provider>
                                
               
      </div>
    </Card.Body>
  </Card>
    )
}

export default Product;




 return (
        <Card>
            <CardHeader>
                <h1></h1>
            </CardHeader>
            <Card.Body className="product-page-container">
                <div className="image-container">
                <Card.Img variant="top" src="/snwb1.jpg"/>
                </div>
                <div>
                <p className="bold">
                    {product.gender.name}'s {product.brand.name} {product.category.name.toUpperCase()}<br/>
                    <label className="head-big">{product.name}</label><br/>
                    <label className="head-big">{product.price} RON</label>
                </p>
                <div className="aesthetic-bar"></div>
                    <p className="description-container">{product.description}</p>
                    <div className="aesthetic-bar"></div>
                    <hr/>
                    <label className="bold">Product specs:</label>
                    <br/>
                    {product.attributes.map((product)=>(<><label className="bold">{product.attribute_name}</label>
                                                        <label className="head-big">{`: ${product.value}`}</label><br/></>))}
                
            </div>
            </Card.Body>
        <div className="product-buttons">
                    <IconContext.Provider value={{size: '50px'}}>
                            <Button className="favorite-button2" onClick={addToFavorite}>
                                <AiOutlineHeart />
                                Add to favorites
                            </Button>

                            <Button className="cart-button" onClick={addToCart}>
                                <AiFillPlusCircle />    
                                Add to cart
                            </Button>
                        </IconContext.Provider>
                   
            </div>
            </Card>)
}